// Code generated by MockGen. DO NOT EDIT.
// Source: zerotrust_chat/chat (interfaces: SessionManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	chat "zerotrust_chat/chat"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSessionManager) Add(arg0 chat.Session) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockSessionManagerMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSessionManager)(nil).Add), arg0)
}

// GetAllIds mocks base method.
func (m *MockSessionManager) GetAllIds() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIds")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllIds indicates an expected call of GetAllIds.
func (mr *MockSessionManagerMockRecorder) GetAllIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIds", reflect.TypeOf((*MockSessionManager)(nil).GetAllIds))
}

// Remove mocks base method.
func (m *MockSessionManager) Remove(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0)
}

// Remove indicates an expected call of Remove.
func (mr *MockSessionManagerMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSessionManager)(nil).Remove), arg0)
}

// ValidateId mocks base method.
func (m *MockSessionManager) ValidateId(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateId", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateId indicates an expected call of ValidateId.
func (mr *MockSessionManagerMockRecorder) ValidateId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateId", reflect.TypeOf((*MockSessionManager)(nil).ValidateId), arg0)
}

// Write mocks base method.
func (m *MockSessionManager) Write(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockSessionManagerMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSessionManager)(nil).Write), arg0, arg1)
}
