// Code generated by MockGen. DO NOT EDIT.
// Source: zerotrust_chat/crypto (interfaces: KeyFactory)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	aes "zerotrust_chat/crypto/aes"
	rsa "zerotrust_chat/crypto/rsa"

	gomock "github.com/golang/mock/gomock"
)

// MockKeyFactory is a mock of KeyFactory interface.
type MockKeyFactory struct {
	ctrl     *gomock.Controller
	recorder *MockKeyFactoryMockRecorder
}

// MockKeyFactoryMockRecorder is the mock recorder for MockKeyFactory.
type MockKeyFactoryMockRecorder struct {
	mock *MockKeyFactory
}

// NewMockKeyFactory creates a new mock instance.
func NewMockKeyFactory(ctrl *gomock.Controller) *MockKeyFactory {
	mock := &MockKeyFactory{ctrl: ctrl}
	mock.recorder = &MockKeyFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyFactory) EXPECT() *MockKeyFactoryMockRecorder {
	return m.recorder
}

// ConstructAesSecretKey mocks base method.
func (m *MockKeyFactory) ConstructAesSecretKey(arg0 string) (aes.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructAesSecretKey", arg0)
	ret0, _ := ret[0].(aes.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstructAesSecretKey indicates an expected call of ConstructAesSecretKey.
func (mr *MockKeyFactoryMockRecorder) ConstructAesSecretKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructAesSecretKey", reflect.TypeOf((*MockKeyFactory)(nil).ConstructAesSecretKey), arg0)
}

// ConstructRsaPublicKey mocks base method.
func (m *MockKeyFactory) ConstructRsaPublicKey(arg0 string) (rsa.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructRsaPublicKey", arg0)
	ret0, _ := ret[0].(rsa.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstructRsaPublicKey indicates an expected call of ConstructRsaPublicKey.
func (mr *MockKeyFactoryMockRecorder) ConstructRsaPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructRsaPublicKey", reflect.TypeOf((*MockKeyFactory)(nil).ConstructRsaPublicKey), arg0)
}

// GenerateAesSecretKey mocks base method.
func (m *MockKeyFactory) GenerateAesSecretKey() (aes.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAesSecretKey")
	ret0, _ := ret[0].(aes.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAesSecretKey indicates an expected call of GenerateAesSecretKey.
func (mr *MockKeyFactoryMockRecorder) GenerateAesSecretKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAesSecretKey", reflect.TypeOf((*MockKeyFactory)(nil).GenerateAesSecretKey))
}

// GenerateRsaPrivateKey mocks base method.
func (m *MockKeyFactory) GenerateRsaPrivateKey() (rsa.PrivateKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRsaPrivateKey")
	ret0, _ := ret[0].(rsa.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRsaPrivateKey indicates an expected call of GenerateRsaPrivateKey.
func (mr *MockKeyFactoryMockRecorder) GenerateRsaPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRsaPrivateKey", reflect.TypeOf((*MockKeyFactory)(nil).GenerateRsaPrivateKey))
}
