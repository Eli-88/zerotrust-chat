// Code generated by MockGen. DO NOT EDIT.
// Source: zerotrust_chat/chat (interfaces: HandshakeConn)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandshakeConn is a mock of HandshakeConn interface.
type MockHandshakeConn struct {
	ctrl     *gomock.Controller
	recorder *MockHandshakeConnMockRecorder
}

// MockHandshakeConnMockRecorder is the mock recorder for MockHandshakeConn.
type MockHandshakeConnMockRecorder struct {
	mock *MockHandshakeConn
}

// NewMockHandshakeConn creates a new mock instance.
func NewMockHandshakeConn(ctrl *gomock.Controller) *MockHandshakeConn {
	mock := &MockHandshakeConn{ctrl: ctrl}
	mock.recorder = &MockHandshakeConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandshakeConn) EXPECT() *MockHandshakeConnMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockHandshakeConn) Read(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockHandshakeConnMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockHandshakeConn)(nil).Read), arg0)
}

// Write mocks base method.
func (m *MockHandshakeConn) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockHandshakeConnMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockHandshakeConn)(nil).Write), arg0)
}
