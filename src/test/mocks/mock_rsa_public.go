// Code generated by MockGen. DO NOT EDIT.
// Source: zerotrust_chat/crypto/rsa (interfaces: PublicKey)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPublicKey is a mock of PublicKey interface.
type MockPublicKey struct {
	ctrl     *gomock.Controller
	recorder *MockPublicKeyMockRecorder
}

// MockPublicKeyMockRecorder is the mock recorder for MockPublicKey.
type MockPublicKeyMockRecorder struct {
	mock *MockPublicKey
}

// NewMockPublicKey creates a new mock instance.
func NewMockPublicKey(ctrl *gomock.Controller) *MockPublicKey {
	mock := &MockPublicKey{ctrl: ctrl}
	mock.recorder = &MockPublicKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicKey) EXPECT() *MockPublicKeyMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockPublicKey) Encrypt(arg0 []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockPublicKeyMockRecorder) Encrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockPublicKey)(nil).Encrypt), arg0)
}

// ToString mocks base method.
func (m *MockPublicKey) ToString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToString")
	ret0, _ := ret[0].(string)
	return ret0
}

// ToString indicates an expected call of ToString.
func (mr *MockPublicKeyMockRecorder) ToString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToString", reflect.TypeOf((*MockPublicKey)(nil).ToString))
}
