// Code generated by MockGen. DO NOT EDIT.
// Source: zerotrust_chat/chat (interfaces: HandShake)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	aes "zerotrust_chat/crypto/aes"

	gomock "github.com/golang/mock/gomock"
)

// MockHandShake is a mock of HandShake interface.
type MockHandShake struct {
	ctrl     *gomock.Controller
	recorder *MockHandShakeMockRecorder
}

// MockHandShakeMockRecorder is the mock recorder for MockHandShake.
type MockHandShakeMockRecorder struct {
	mock *MockHandShake
}

// NewMockHandShake creates a new mock instance.
func NewMockHandShake(ctrl *gomock.Controller) *MockHandShake {
	mock := &MockHandShake{ctrl: ctrl}
	mock.recorder = &MockHandShakeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandShake) EXPECT() *MockHandShakeMockRecorder {
	return m.recorder
}

// Handshake mocks base method.
func (m *MockHandShake) Handshake() (aes.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handshake")
	ret0, _ := ret[0].(aes.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handshake indicates an expected call of Handshake.
func (mr *MockHandShakeMockRecorder) Handshake() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handshake", reflect.TypeOf((*MockHandShake)(nil).Handshake))
}
