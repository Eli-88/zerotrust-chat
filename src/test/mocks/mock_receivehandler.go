// Code generated by MockGen. DO NOT EDIT.
// Source: zerotrust_chat/chat (interfaces: ReceiveHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReceiveHandler is a mock of ReceiveHandler interface.
type MockReceiveHandler struct {
	ctrl     *gomock.Controller
	recorder *MockReceiveHandlerMockRecorder
}

// MockReceiveHandlerMockRecorder is the mock recorder for MockReceiveHandler.
type MockReceiveHandlerMockRecorder struct {
	mock *MockReceiveHandler
}

// NewMockReceiveHandler creates a new mock instance.
func NewMockReceiveHandler(ctrl *gomock.Controller) *MockReceiveHandler {
	mock := &MockReceiveHandler{ctrl: ctrl}
	mock.recorder = &MockReceiveHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiveHandler) EXPECT() *MockReceiveHandlerMockRecorder {
	return m.recorder
}

// OnReceive mocks base method.
func (m *MockReceiveHandler) OnReceive(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnReceive", arg0)
}

// OnReceive indicates an expected call of OnReceive.
func (mr *MockReceiveHandlerMockRecorder) OnReceive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReceive", reflect.TypeOf((*MockReceiveHandler)(nil).OnReceive), arg0)
}
